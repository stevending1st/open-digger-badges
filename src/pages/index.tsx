import { badgeStyleList } from '@/common/badgeStyle'
import { ODBInput } from '@/components/OBDInput'
import { ODBSelect } from '@/components/OBDSelect'
import Head from 'next/head'
import { useCopyToClipboard, useDebounce } from 'react-use';
import { Controller, useForm } from 'react-hook-form'
import { filterEmptyStringKey } from '@/common/filter';
import { useMemo, useRef } from 'react';
import { metricsList } from '@/common/metrics';

export default function Home() {
  const { register, control, getValues, setValue, watch } = useForm();

  const badgeBox = useRef<HTMLDivElement>(null);

  const [state, copyToClipboard] = useCopyToClipboard();

  const owner = watch("owner");
  const repo = watch("repo");
  const metric = watch("metric");
  const month = watch("month");
  const badgeStyle = watch("badgeStyle");
  const labelColor = watch("labelColor");
  const color = watch("color");

  const isDisabled = useMemo(() => !owner || !metric, [owner, metric]);
  const metricName = useMemo(() => metricsList.filter(({ value }) => value === metric)[0]?.label, [metric])

  const getBadgeURL = () => `${location?.origin}/api/indexBadge?${(new URLSearchParams(filterEmptyStringKey(getValues()))).toString()}`

  useDebounce(async () => {
    const badgeURL = getBadgeURL();
    const svg = await (await fetch(badgeURL)).text()
    if (!badgeBox.current) return;
    badgeBox.current.innerHTML = svg;
  }, 500, [owner, repo, metric, month, badgeStyle, labelColor, color])

  const handleGetBadgeURL = () =>
    copyToClipboard(`![${metricName}](${getBadgeURL()}) `)

  const handleGetMarkdown = () =>
    copyToClipboard(`<img alt="${metricName}" src="${getBadgeURL()}">`);

  return (
    <>
      <Head>
        <title>Open Digger Badges</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='vh-100'>
        <h1 className='text-center mt-20'><a href='https://github.com/stevending1st/open-digger-badges/'>Open Digger Badges</a></h1>
        <p className="italic text-center mt-4">A project to show the badges of <a href='https://github.com/X-lab2017/open-digger'>OpenDigger</a> indicators.</p>

        <div className='flex justify-center'>
          <div className='border-1 b-solid py-4 px-6 my-4 bg-#FFCCCC max-w-2xl b-rd-2 border-red'>
            <strong className='font-size-0 text-center mt-20 color-#FF0000'>Warning:</strong>
            <p className='color-#FF0000 mt-2 font-500 italic'>
              The API is not yet stable, please do not use it in production environment.
            </p>
          </div>
        </div>

        <div className='flex justify-center' ref={badgeBox}>

        </div>

        <div className='flex justify-center'>
          <form className='flex flex-col max-w-2xl'>
            <div className="my-2"><h4>Basic Information</h4></div>
            <div className="my-2">
              <label htmlFor="owner">
                <sup className='color-#FF0000'>*</sup>Owner Name:
              </label>
              <ODBInput placeholder="owner name" id="owner" {...register("owner")} />
            </div>
            <div className="my-2">
              <label htmlFor="repo">Repo Name:</label>
              <ODBInput placeholder="repo name" id="repo" {...register("repo")} />
            </div>
            <div className="my-2">
              <label htmlFor="metric">
                <sup className='color-#FF0000'>*</sup>Choose a Metric:
              </label>
              <Controller
                name="metric"
                control={control}
                defaultValue=""
                rules={{ required: true }}
                render={({ field }) => (
                  <ODBSelect {...field} id="metric" optionList={metricsList} onChange={({ target }) => {
                    console.log("target", target.value)
                    setValue("metric", target.value)
                  }} />
                )}
              />
            </div>
            <div className="my-2">
              <label htmlFor="month">
                <sup className='color-#FF0000'>*</sup>Number of months:
              </label>
              <ODBInput placeholder="-1" id="month" {...register("month")} />
            </div>
            <hr />
            <div className="my-2"><h4>Badge Style Configuration</h4></div>
            <div className="my-2">
              <label htmlFor="badgeStyle">Choose a Style For Badge:</label>
              <Controller
                name="badgeStyle"
                control={control}
                defaultValue=""
                rules={{ required: true }}
                render={({ field }) => (
                  <ODBSelect {...field} id="badgeStyle" optionList={badgeStyleList} onChange={({ target }) => {
                    console.log("badgeStyle", target.value)
                    setValue("badgeStyle", target.value)
                  }} />
                )}
              />
            </div>
            <div className="my-2">
              <label htmlFor="labelColor">Label Color:</label>
              <ODBInput placeholder="label color" id="labelColor" {...register("labelColor")} />
            </div>
            <div className="my-2">
              <label htmlFor="message-color">Message Color:</label>
              <ODBInput placeholder="message color" id="message-color" {...register("color")} />
            </div>
            <div>
              <button type="button" disabled={isDisabled} className="px-3 py-2 mx-1 border-none b-rd-1 color-white bg-#0084ff active:bg-#0084ee hover:bg-#1195ff disabled:bg-#0084ff! disabled:opacity-50!" onClick={handleGetBadgeURL}>Copy Badge URL</button>
              <button type="button" disabled={isDisabled} className="px-3 py-2 mx-1 border-none b-rd-1 color-white bg-#0084ff active:bg-#0084ee hover:bg-#1195ff disabled:bg-#0084ff! disabled:opacity-50!" onClick={handleGetMarkdown}>Copy Markdown</button>
            </div>
          </form>
        </div>
      </main>
    </>
  )
}
